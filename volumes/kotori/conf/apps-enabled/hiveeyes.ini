; ------------------------------------------
; Name:     Hiveeyes
; Date:     October 2015
; About:    A distributed monitoring platform collecting sensor data for the beekeeper community.
; Channel:  Transport: BERadio over RF69, MQTT and HTTP over TCP; Format: Bencode, JSON
; Storage:  InfluxDB
; See also: https://getkotori.org/docs/applications/hiveeyes.html
;           https://hiveeyes.org/docs/system/
; ------------------------------------------


; -----------------------------
; Data acquisition through MQTT
; -----------------------------
[hiveeyes]
enable      = true
type        = vendor
realm       = hiveeyes
mqtt_topics = hiveeyes/#

# How often to log metrics
metrics_logger_interval = 60

# Enable automatic dashboard refresh interval taming
dashboard_refresh_taming = true


; --------------------------------------------------------------------
; Data acquisition through HTTP
; https://getkotori.org/docs/handbook/acquisition/protocol/http.html
; https://getkotori.org/docs/handbook/forwarders/http-api-generic.html
; --------------------------------------------------------------------
[hiveeyes.http-acquisition]
enable          = true

type            = application
application     = kotori.io.protocol.forwarder:boot

realm           = hiveeyes
source          = http:/api/hiveeyes/{address:.*}/{slot:(data|event)} [POST]
target          = mqtt:/hiveeyes/{address}/{slot}.json


; ----------------------------------------------------------------------
; Data export
; https://getkotori.org/docs/handbook/export/
; https://getkotori.org/docs/handbook/forwarders/http-api-export.html
; ----------------------------------------------------------------------
[hiveeyes.data-export]
enable          = true

type            = application
application     = kotori.io.protocol.forwarder:boot

realm           = hiveeyes
source          = http:/api/{realm:hiveeyes}/{network:.*}/{gateway:.*}/{node:.*}/{slot:(data|event)}.{suffix} [GET]
target          = influxdb:/{database}?measurement={measurement}
transform       = kotori.daq.strategy.wan:WanBusStrategy.topology_to_storage,
                  kotori.io.protocol.influx:QueryTransformer.transform


; -----------------------------------------------------
; Firmware builder
; https://getkotori.org/docs/applications/firmware.html
; -----------------------------------------------------
#[hiveeyes.firmware-builder]
enable          = true

type            = application
application     = kotori.firmware.service:boot

realm           = hiveeyes
source          = http:/api/{TELEMETRY_REALM:hiveeyes}/{TELEMETRY_USER:.*}/{TELEMETRY_SITE:.*}/{TELEMETRY_NODE:.*}/{slot:firmware}.{suffix} [POST]
patch_files     = *.ino, *.pde, *.cpp, *.h, Makefile*


# Firmware repository
# -------------------
#repository      = https://github.com/hiveeyes/arduino

# Local development
#repository      = /Users/amo/dev/hiveeyes/sources/arduino/.git


# Espressif SDK and Arduino Core for ESP8266
# ------------------------------------------
#
#   git clone https://github.com/esp8266/Arduino /opt/esp8266-arduino
#   cd /opt/esp8266-arduino/tools
#   ./get.py
#
#esp_root        = /opt/esp8266-arduino

# Local development
#esp_root        = /Users/amo/dev/hiveeyes/sdk/esp8266-arduino


# TODO: Send notification via MQTT
#notify          = mqtt:/hiveeyes/{address}/firmware